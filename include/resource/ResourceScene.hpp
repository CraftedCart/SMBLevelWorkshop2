/**
 * @file
 * @brief Header for the WS2::Model::Scene class
 */

#ifndef SMBLEVELWORKSHOP2_MODEL_SCENE_HPP
#define SMBLEVELWORKSHOP2_MODEL_SCENE_HPP

#include "model/Mesh.hpp"
#include "resource/AbstractResource.hpp"
#include <QFile>
#include <QDir>
#include <assimp/scene.h>

namespace WS2 {
    namespace Resource {
        /**
         * @todo Load/unload the scene using the load()/unload() functions
         */
        class ResourceScene : public AbstractResoruce {
            protected:
                /**
                 * @brief A vector of 3D Meshes in the Scene
                 */
                QVector<Model::Mesh> meshes;

            public:
                /**
                 * @brief Constructs an empty scene
                 */
                ResourceScene();

                /**
                 * @brief Construct a scene from the file given
                 *
                 * This just calls `addModel(file)` for you
                 *
                 * @param file The model file
                 */
                ResourceScene(QFile &file);

                /**
                 * @return The meshes that belong to this scene
                 */
                QVector<Model::Mesh>& getMeshes();

                /**
                 * @brief Append a model to the scene from the file given, and adds the file path to the resource
                 *        filePaths vector
                 *
                 * @param file The model file to append
                 */
                void addModel(QFile &file);

            protected:
                /**
                 * @brief Append a model to the scene from the byte array given
                 *
                 * Note that this isn't the best way of creating models. Certail file types, such as OBJ, may require
                 * other external files, which can't be found when using a byte array instead of a file path.
                 *
                 * @param bytes Byte array containing the contents of a model file
                 * @param hint File extension of the model file<br>
                 *             Assimp will guess the file type with an empty string for the hint
                 */
                void addModelFromMemory(const QByteArray &bytes, const char *hint = "");

                /**
                 * @brief Append a model to the scene from the file given
                 *
                 * @param filePath The file path to the model file to append
                 */
                void addModelFromFile(const char *filePath);

                /**
                 * @brief Recursive function that keeps calling itself for each child node in the parent node given.
                 *        This function is used to convert data generated by Assimp into data useable by WS2.
                 *
                 * @param node The parent node to process. This is usually the root node if calling it yourself.
                 * @param scene The scene that the node belongs to
                 * @param globalTransform A matrix transformation to apply to all vertices
                 * @param parentDir The parent directory of the file
                 */
                void processNode(const aiNode *node, const aiScene *scene, const glm::mat4 globalTransform, const QDir *parentDir);

                /**
                 * @brief Converts an aiMesh into a WS2::Model::Mesh
                 *
                 * @param mesh The aiMesh to convert
                 * @param scene The scene that the aiMesh belongs to
                 * @param globalTransform A matrix transformation to apply to all vertices
                 * @param parentDir The parent directory of the file
                 *
                 * @return The converted mesh
                 */
                Model::Mesh processMesh(const aiMesh *mesh, const aiScene *scene, const glm::mat4 globalTransform, const QDir *parentDir);

                /**
                 * @brief Loads textures for a material
                 *
                 * @param material The material to load textures for
                 * @param type The type of textures to load
                 * @param parentDir The parent directory of the file
                 *
                 * @return A vector of textures
                 */
                QVector<Resource::ResourceTexture*> loadMaterialTextures(aiMaterial *material, aiTextureType type, const QDir *parentDir);
        };
    }
}

#endif

